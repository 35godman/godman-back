Opens in a new window Opens an external website Opens an external website in a
new window
<!---->Close this dialog<!---->
This website utilizes technologies such as cookies to enable essential site
functionality, as well as for analytics, personalization, and targeted
advertising purposes. To learn more, view the following link:



<!---->Close Cookie Preferences<!---->


v1v2

--------------------------------------------------------------------------------

Guides

v1

Ctrl+K
Overview
All
Guides
Reference
Pages

START TYPING TO SEARCH…


GETTING STARTED

 * 
 * 
 * 
 * 
 * 


ORGANIZATIONS

 * 
 * * 
   * 
   * 
   * 
   * 
 * * 
   * 
   * 


PROJECTS

 * 
 * * 
   * 
   * 
   * 
 * 


INDEXES

 * 
 * 
 * 
 * 
 * 


DATA

 * 
 * 
 * 
 * 
 * 
 * * 
   * 
   * 
 * * 
   * 
   * 


OPERATIONS

 * 
 * 
 * 
 * 
 * 


INTEGRATIONS

 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 


REFERENCE

 * 
 * 
 * 
 * 
 * 
 * 


SUPPORT

 * 
 * 
 * 


OVERVIEW

An introduction to the Pinecone vector database.



PINECONE OVERVIEW

Pinecone makes it easy to provide long-term memory for high-performance AI
applications. It’s a managed, cloud-native with a and no infrastructure hassles.
Pinecone serves fresh, filtered query results with low latency at the scale of
billions of vectors.


VECTOR EMBEDDINGS PROVIDE LONG-TERM MEMORY FOR AI.

Applications that involve large language models, generative AI, and semantic
search rely on , a type of data that represents semantic information. This
information allows AI applications to gain understanding and maintain a
long-term memory that they can draw upon when executing complex tasks.


VECTOR DATABASES STORE AND QUERY EMBEDDINGS QUICKLY AND AT SCALE.

Vector databases like Pinecone offer optimized storage and querying capabilities
for embeddings. Traditional scalar-based databases can’t keep up with the
complexity and scale of such data, making it difficult to extract insights and
perform real-time analysis. Vector indexes like FAISS lack useful features that
are present in any database. Vector databases combine the familiar features of
traditional databases with the optimized performance of vector indexes.


PINECONE INDEXES STORE RECORDS WITH VECTOR DATA.

Each record in a Pinecone index contains a unique ID and an array of floats
representing a dense vector embedding.

Pinecone record diagram
[https://raw.githubusercontent.com/pinecone-io/img/main/record-diagram.png]

Each record may also contain a for hybrid search and for filtered queries.


PINECONE QUERIES ARE FAST AND FRESH.

Pinecone returns low-latency, accurate results for indexes with billions of
vectors. return up to 200 queries per second per replica. Queries reflect
up-to-the-second updates such as upserts and deletes. and or to improve
performance.


UPSERT AND QUERY VECTOR EMBEDDINGS WITH THE PINECONE API.

Perform CRUD operations and query your vectors using HTTP, , or .

Python
index = pinecone.Index('example-index') 

upsert_response = index.upsert(
    vectors=[
        {'id': 'vec1',
         'values': [0.1, 0.2, 0.3],
         'metadata': {'genre': 'drama'},
         'sparse_values': {
             'indices': [10, 45, 16],
             'values': [0.5, 0.5, 0.2]
         }},
        {'id': 'vec2',
         'values': [0.2, 0.3, 0.4],
         'metadata': {'genre': 'action'},
         'sparse_values': {
             'indices': [15, 40, 11],
             'values': [0.4, 0.5, 0.2]
         }}
    ],
    namespace='example-namespace'
)



QUERY YOUR INDEX FOR THE MOST SIMILAR VECTORS.

Specify the your index uses to evaluate vector similarity, along with and .

PythonJavaScriptcurl
pinecone.create_index("example-index", dimension=128, metric="euclidean", pods=4, pod_type="s1.x1")


await pinecone.createIndex({
  name: "example-index",
  dimension: 128,
  metric: "euclidean",
  pods: 4,
  podType: "s1.x1",
});


curl -i -X POST https://controller.YOUR_ENVIRONMENT.pinecone.io/databases \
  -H 'Api-Key: YOUR_API_KEY' \
  -H 'Content-Type: application/json' \
  -d '{
    "name": "example-index",
    "dimension": 128,
    "metric": "euclidean",
    "pods": 4,
    "pod_type": "p1.x1"
  }'


, or query by ID.

PythonJavaScriptcurl
index.query(
  vector=[0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3],
  top_k=3,
  include_values=True
)

# Returns:
# {'matches': [{'id': 'C',
#               'score': -1.76717265e-07,
#               'values': [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]},
#                   {'id': 'B',
#                    'score': 0.080000028,
#                    'values': [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]},
#                   {'id': 'D',
#                    'score': 0.0800001323,
#                    'values': [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]}],
# }


const index = pinecone.Index("example-index");
const queryRequest = {
  vector: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3],
  topK: 3,
  includeValues: true
};
const queryResponse = await index.query({ queryRequest });

// Returns:
// {'matches': [{'id': 'C',
//               'score': -1.76717265e-07,
//               'values': [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]},
//                   {'id': 'B',
//                    'score': 0.080000028,
//                    'values': [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]},
//                   {'id': 'D',
//                    'score': 0.0800001323,
//                    'values': [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]}],
// }


curl -i -X POST https://hello-pinecone-YOUR_PROJECT.svc.YOUR_ENVIRONMENT.pinecone.io/query \
  -H 'Api-Key: YOUR_API_KEY' \
  -H 'Content-Type: application/json' \
  -d '{
    "vector":[0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3],
    "topK": 3,
    "includeValues": true
  }'



GET STARTED

to get a production-ready vector search service up and running in minutes.

Updated about 2 months ago

--------------------------------------------------------------------------------


Did this page help you?
Yes
No
 * 
 * * 
   * 
   * 
   * 
   * 
   * 
   * 
   * 







Pinecone [https://pinecone.io/images/pinecone-white.svg]
 * 
 * 
 * 
 * 
 * 
 * 

© Pinecone Systems, Inc. | San Francisco, CA | | | | | |

Pinecone is a registered trademark of Pinecone Systems, Inc.


