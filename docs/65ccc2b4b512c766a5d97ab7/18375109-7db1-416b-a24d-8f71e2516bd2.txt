Opens in a new window Opens an external website Opens an external website in a
new window
<!---->Close this dialog<!---->
This website utilizes technologies such as cookies to enable essential site
functionality, as well as for analytics, personalization, and targeted
advertising purposes. To learn more, view the following link:



<!---->Close Cookie Preferences<!---->


v1v2

--------------------------------------------------------------------------------

Guides

v2

Ctrl+K
Understanding multitenancy
All
Guides
Reference
Pages

START TYPING TO SEARCH…


GETTING STARTED

 * 
 * 
 * 
 * 
 * 


ORGANIZATIONS

 * 
 * * 
   * 
   * 
   * 
   * 
 * * 
   * 
   * 


PROJECTS

 * 
 * 
 * 
 * 
 * 


INDEXES

 * 
 * 
 * 
 * 
 * 
 * 
 * 


DATA

 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * * 
   * 
   * 
   * 
 * * 
   * 


OPERATIONS

 * 
 * 
 * 
 * 
 * 


INTEGRATIONS

 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 


REFERENCE

 * 
 * 
 * 
 * 
 * 
 * 


SUPPORT

 * 
 * 
 * 


UNDERSTANDING MULTITENANCY



This page describes strategies to implement multitenancy in Pinecone indexes.
Multitenancy describes the act of keeping sets of vectors separate within a
Pinecone index (e.g., segmenting vectors by customer, physically or logically).
To learn how to create or modify an index, see .


NAMESPACES

One approach to multitenancy is to use to isolate segments of vectors within a
single index. This is a 'pool' model that shares most resources between tenants
while keeping them logically separate.


ADVANTAGES

 * Namespaces reduce the need for additional indexes, reducing maintenance
   effort.


DISADVANTAGES

 * Tenants share compute and storage resources.
 * Deleting tenant data is complicated and takes more time.


METADATA FILTERING

This approach to multitenancy stores all segments of vectors in a single index
and at query time. This is another 'pool' model; here, you separate tenants at
the query level.


ADVANTAGES

 * Metadata filtering allows you to query across multiple tenants.
 * Metadata filtering reduces the need for additional indexes, reducing
   maintenance effort.


DISADVANTAGES

 * Tenants share compute and storage resources.
 * There is no way to track tenant-specific costs.
 * You cannot provision tenants with different dimensions, since dimensionality
   is set at the index level.


SEPARATE INDEXES

Another approach to multitenancy is to create a separate index for each segment.
This is a 'silo' model that provides dedicated resources to each tenant. For
example, if you need to separate vectors for each customer, you can create a
separate index for each customer.


ADVANTAGES

 * This model separates tenants physically, preventing queries across tenants
   and allocating compute and storage
   resources to each tenant.


DISADVANTAGES

 * Creating and maintaining multiple indexes requires additional effort and
   cost.
 * This model doesn't share resources between tenants, which is inefficient if
   you have tenants
   represented by a small number of vectors.
 * Creating a new index takes more time than creating a namespace.

Updated 30 days ago

--------------------------------------------------------------------------------


Did this page help you?
Yes
No
 * 
 * * * 
     * 
   * * 
     * 
   * * 
     * 







Pinecone [https://pinecone.io/images/pinecone-white.svg]
 * 
 * 
 * 
 * 
 * 
 * 

© Pinecone Systems, Inc. | San Francisco, CA | | | | | |

Pinecone is a registered trademark of Pinecone Systems, Inc.


