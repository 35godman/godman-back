Opens in a new window Opens an external website Opens an external website in a
new window
<!---->Close this dialog<!---->
This website utilizes technologies such as cookies to enable essential site
functionality, as well as for analytics, personalization, and targeted
advertising purposes. To learn more, view the following link:



<!---->Close Cookie Preferences<!---->


Product
Solutions
Resources
Company



HOW TO USE JUPYTER NOTEBOOKS FOR MACHINE LEARNING AND AI TASKS

Aug 23, 2023

Author
[/_next/image/?url=https%3A%2F%2Fcdn.sanity.io%2Fimages%2Fvr8gru94%2Fproduction%2F8f66c8410d14247e66c68467afa7870768ed147b-460x460.png&w=3840&q=100]

Staff Developer Advocate

--------------------------------------------------------------------------------

Jump to section

--------------------------------------------------------------------------------

Jupyter Notebooks are files that combine two content types:

 1. Text and Markdown
 2. Executable Python code

Jupyter Notebooks combine text and executable Python code
[https://cdn.sanity.io/images/vr8gru94/production/8953e8fc5fa9f27c807d68c138de958de16e7230-1033x488.png]
Jupyter Notebooks combine text and executable Python code, making them ideal for
learning, prototyping and experimentation.

The combination of these two types of files is powerful: Notebooks allow you to
tell a story in words and images while presenting code that can be run or
tweaked in place.

Jupyter Notebooks are easy to start using. Unlike nearly every programming
language, they do not require installation or setup on your local machine if you
run an open-source Notebook via one of the hosting providers we’ll introduce in
this post.

Jupyter Notebooks are easy to share, making them ideal for Machine Learning and
AI research, modeling, fine-tuning, experimentation, and collaboration.

When you’re finished reading this blog post, you’ll understand:

 * How to run existing Notebooks for free via Google Colab or Kaggle
 * How to use secrets (such as API keys) in your Notebooks securely
 * Where to find some initial Notebooks for learning and expanding your data
   science and AI skillset


HOW TO RUN OPEN-SOURCE JUPYTER NOTEBOOKS FOR FREE

The fastest way to get started is with open-source Jupyter Notebooks. hosts a
wide array of Notebooks demonstrating AI use cases, such as:

 * Semantic search
 * Retrieval Augmented Generation or RAG
 * Analytics
 * Generative AI
 * And more

To run any of these Notebooks which use Pinecone’s vector database, you’ll need
a free Pinecone account, which you can get from . Pinecone has a generous free
tier that allows you to create and use an index - perfectly sufficient for
running through any examples in the above repository.

If you’d like a more in-depth walkthrough of how to use the Pinecone dashboard,
see the in the learn directory of our examples repository.

The are organized by topic - each directory is named after the overall topic:

Pinecone's example Jupyter Notebooks in GitHub
[https://cdn.sanity.io/images/vr8gru94/production/2d789769745f76d851b51822bc6eb081697a7855-383x536.png]
Pinecone's example Jupyter Notebooks in GitHub cover a wide array of AI
techniques

Within each topic, you’ll find multiple Notebook files. Notebooks end in the
`.ipynb` file extension.

We’ll choose the Azure OpenAI with LangChain Notebook to demonstrate loading the
notebook in Google Colab:

Azure OpenAI with LangChain example Jupyter Notebook
[https://cdn.sanity.io/images/vr8gru94/production/4d84a882917594f463546b575c1e499ac1a406fb-1055x633.png]
Azure OpenAI with LangChain example Jupyter Notebook

On all of the Pinecone example Jupyter Notebooks, you’ll find the blue Open in
Colab button at the top of the preview in GitHub:


Open in Google Colab button
[https://cdn.sanity.io/images/vr8gru94/production/7b730aefe8ff5040135bf95c411d88a5508b6f45-121x25.png]
Click this button on any Jupyter Notebook you find in GitHub to load it in
Google Colab and begin working

Click this button to load the Notebook in Google Colab. This service helps you
run and share Jupyter Notebooks. You’ll need to log in with your Google account.


RATHER WATCH A WALKTHROUGH VIDEO? WE'VE GOT YOU COVERED

If you’d like to follow an in-depth video that walks you through this process,
check out our .


FIRST-TIME GOOGLE COLAB SETUP STEPS

If this is the first time you’ve used Google Colab to load a Notebook from
GitHub, you will encounter this popup, which asks you to grant Google Colab
permission to open Notebooks from GitHub on your behalf:

Authorizing Google Colab to load Jupyter Notebooks from GitHub
[https://cdn.sanity.io/images/vr8gru94/production/291be18163f5428a356cf4437b8971b866a437b9-568x389.jpg]
Authorize Google Colab to load Jupyter Notebooks from GitHub

Click Authorize with GitHub. You may or may not encounter another similar
warning stating that Google Colab is unable to open new browser windows on your
behalf:

Enable Google Colab popup windows
[https://cdn.sanity.io/images/vr8gru94/production/1e14448082bc76e97085a041298db63d91c7d782-629x295.jpg]
Enable Google Colab popup windows so that you can load Notebooks

If you do, look for a message from your browser and click the button to allow
Google Colab to open popup windows.


WORKING WITH CELLS

Once you’ve got your Jupyter Notebook loaded in Google Colab, you can begin
working with the text and code cells. There are two ways to run a Jupyter
Notebook:

 1. Select Run All (ctrl+F9) from the Runtime menu
 2. You can interactively step through each cell one at a time and press the
    play button to the left of each cell to execute the code cells

Option #1, running every cell from top to bottom, is an excellent choice if
you’re in a hurry to get to the final results of the Notebook or if you’re using
the Notebook to test some tool or service within the Notebook to ensure it’s
working correctly.

Option #2, stepping through the text and code cells individually and reading and
running them one by one, is the best way to learn the techniques the Notebook
demonstrates.

Remember that code cells are modifiable - you could, for example, add a print
statement anywhere you like to understand a given variable or data structure
better, then press that cell’s play button again to execute your modified code
and see the value printed to the output console below the cell:

Press the play button on a Jupyter Notebook code cell
[https://cdn.sanity.io/images/vr8gru94/production/4391333709b121b21830fa7f54dc509981c6b258-779x176.png]
Press the play button on a Jupyter Notebook code cell to execute the code
defined within it.


Google Colab is not the only service available for working with Notebooks, but
it is one of the easiest to get started with and is free.

is another excellent resource for running Notebooks, discovering and quickly
loading datasets, and sharing your work with others. Kaggle also runs many data
science competitions that can help you level up your skills.


USING JUPYTER NOTEBOOKS WITH SECRETS (LIKE API KEYS)

There’s an important caveat that you should understand to use Notebooks safely.
API keys, such as Pinecone or OpenAI API keys, for example, are secrets -
they’re meant to identify you and your account uniquely.

There’s a risk of accidentally leaking your API key via a Notebook if you’re not
careful, which could lead to nefarious actors performing actions in your account
and costing you money. The output of Notebooks is saved in the file format
itself, so if you hardcode your API key into a code cell like this:

os.environ["OPENAI_API_KEY"] = "sk-273weq98qwegfywfg34r78tywefuygefwqaefuyg"



and then you save or share your Notebook with someone you don’t trust, or commit
your Notebook to a public repository on GitHub, for example, others can see and
abuse your API key.

Always ensure that you’re loading your API keys securely by using a password
field such as the one exposed by the getpass utility, and store your API keys in
environment variables that your subsequent code cells can reference, like so:

from getpass import getpass 
import os
pinecone_api_key = getpass('Enter your Pinecone API Key: ')
os.environ["PINECONE_API_KEY"] = pinecone_api_key



See also the for more information, or watch our for a detailed explanation and
demonstration if you’re unfamiliar with using API keys.




Share via:


FURTHER READING


Author
[/_next/image/?url=https%3A%2F%2Fcdn.sanity.io%2Fimages%2Fvr8gru94%2Fproduction%2F8f66c8410d14247e66c68467afa7870768ed147b-460x460.png&w=3840&q=100]

Staff Developer Advocate

--------------------------------------------------------------------------------

Jump to section
 * 
 * 
 * 
 * 
 * 

Share via:


Product

Solutions

Resources

Company

Legal


© Pinecone Systems, Inc. | San Francisco, CA

Pinecone is a registered trademark of Pinecone Systems, Inc.

[/_next/image/?url=%2F_next%2Fstatic%2Fmedia%2Fpopup-bg.197eeb2c.png&w=3840&q=100]


INTRODUCING — PINECONE SERVERLESS

Build knowledgeable AI at up to 50x lower cost. No need to manage
infrastructure. Get started with $100 in usage credits.



DON'T MISS THE NEXT ONE...



Get an email the next time we publish an article about machine learning and
similarity search.

Get Updates